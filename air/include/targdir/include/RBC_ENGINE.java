package io.xc5;
public class RBC_ENGINE {

  public class TYPE_KIND {
    public static final int INVALID = 0;
    public static final int PRIMITIVE = 1;
    public static final int CLASS = 2;
    public static final int INTERFACE = 3;
    public static final int TYPE_VARIABLE = 4;
    public static final int ARRAY = 5;
  };
  public class TAG_DEF_VAL {
    public static final int KEEP = 0;
    public static final int SET = 1;
    public static final int UNSET = 2;
  };
  public class EXEC_KIND {
    public static final int CONST = 0;
    public static final int CMP_GT = 1;
    public static final int CMP_GE = 2;
    public static final int CMP_LT = 3;
    public static final int CMP_LE = 4;
    public static final int CMP_EQ = 5;
    public static final int CMP_NE = 6;
    public static final int ARITH_ADD = 7;
    public static final int ARITH_SUB = 8;
    public static final int ARITH_MPY = 9;
    public static final int ARITH_DIV = 10;
    public static final int ARITH_MOD = 11;
    public static final int AND = 17;
    public static final int OR = 18;
    public static final int NOT = 16;
    public static final int IF = 50;
    public static final int IS_STR_EQ = 197;
    public static final int IS_STR_SUB = 198;
    public static final int STR_REG_MATCH = 199;
    public static final int GET_ARG = 200;
    public static final int GET_RET = 201;
    public static final int GET_ARGCNT = 202;
    public static final int GET_MEM_SIZE = 203;
    public static final int GET_VALUE = 204;
    public static final int GET_ELEM_COUNT = 205;
    public static final int GET_THIS_POINTER = 206;
    public static final int GET_TYPE_NAME = 298;
    public static final int GET_TYPE_KIND = 299;
    public static final int SET_PARM_TAINTED = 300;
    public static final int SET_IMPLICIT_ASSIGN = 301;
    public static final int SET_PARM_DEREF = 302;
    public static final int SET_PARM_MOD = 303;
    public static final int SET_PARM_BASE_AND_FLDNM = 304;
    public static final int SET_FUNC_MAY_SLEEP = 305;
    public static final int SET_ATOMIC_REGION_BEGIN = 306;
    public static final int SET_ATOMIC_REGION_END = 307;
    public static final int SET_FUNC_ATOMIC = 308;
    public static final int SET_FUNC_SHUTDOWN = 309;
    public static final int SET_FUNC_COLL_APPEND = 310;
    public static final int SET_FUNC_COLL_REMOVE = 311;
    public static final int SET_FUNC_COLL_GET = 312;
    public static final int SET_FUNC_COLL_BACK = 313;
    public static final int DECLARE_MALLOC_SIMILAR = 505;
    public static final int DECLARE_FREE_SIMILAR = 506;
    public static final int SET_TAG = 510;
    public static final int UNSET_TAG = 511;
    public static final int IS_TAG_SET = 512;
    public static final int OR_TAG = 513;
    public static final int COPY_TAG = 514;
    public static final int EVAL_TAG = 515;
    public static final int SET_TAG_CONST_DEFVAL = 516;
    public static final int DECL_TAG_EQUAL = 517;
    public static final int SET_TAG_TO_ALL_PARAMS = 518;
    public static final int PRE_SANITIZED = 600;
    public static final int PRE_CALL = 604;
    public static final int POST_CHECK_VAR = 606;
    public static final int POST_CHECK_VAR_VALUE = 607;
    public static final int POST_CALL = 610;
    public static final int PARM_IS_DEF_BY_FUNC = 612;
    public static final int FUNC_MAY_ENTER_RECURSION = 613;
    public static final int FUNC_MAY_NOT_RETURN = 614;
    public static final int FUNC_IS_ASYNCHRONOUS_SAFE = 615;
    public static final int FUNC_PERFORMS_SANITIZE = 616;
    public static final int IS_AUTOMATIC_VARIABLE = 620;
    public static final int IS_DYNAMICALLY_ALLOCATED_IF_COPIED = 621;
    public static final int IS_COMPATIBLE_PARM_TYPE = 622;
    public static final int IS_PARM_TAINTED = 623;
    public static final int DO_NOT_GET_CALLED = 624;
    public static final int DO_NOT_ACCESS_SHARED_OBJ = 625;
    public static final int DO_NOT_CALL_SLEEP_IN_ATM = 626;
    public static final int IMPLICIT_CALL = 627;
    public static final int CALL_SUPER = 629;
    public static final int FUNC_INVOKED_BY_SUBCLASS = 630;
    public static final int IS_OBJ_METH_OVERRIDE = 631;
    public static final int PRE_CHECK_VAR = 632;
    public static final int PRE_CHECK_VAR_VALUE = 633;
    public static final int JNI_MODEL_PRAGMA = 1000;
  };
  public static long Rbc_assert(long cond, String rule_name) { return 0; };
  public static long Rbc_rule_exception( String rule_name, long except) { return 0; };
  public static long Rbc_annotate( String aname, long expr) { return 0; };
  public static long Rbc_disable_rule( String rule_name) { return 0; };
  public static long Rbc_apply_rule( String rule_name) { return 0; };
  public static long Rbc_enable_builtin( String rule_name) { return 0; };
  public static long For_all_exec_path(long cond, String rule_name) { return 0; };
  public static long Rbc_same_as_func( String fname) { return 0; };
  public static long Rbc_global_used( String vname, String file, long def_line, long call_line) { return 0; };
  public static long Rbc_define_call( String fname, String file, long def_line, long call_line) { return 0; };
  public static long For_all_func(long exec_expr) { return 0; };
  public static long Rbc_set_rule_set( String rule_name, String rule_set) { return 0; };
  public static long Not(long v) { return 0; };
  public static long Or(long v1, long v2) { return 0; };
  public static long And(long v1, long v2) { return 0; };
  public static long If(long cond, long true_exp, long false_exp) { return 0; };
  public static long Pre_sanitized(Object v) { return 0; };
  public static long Pre_call( String fname) { return 0; };
  public static long Is_errno_cleared_before() { return 0; };
  public static long Pre_check_var_value(Object v, String opr, Object value) { return 0; };
  public static long Post_check_var_value(Object v, String opr, Object value) { return 0; };
  public static long Post_check_var_func(Object v, String fname, String value) { return 0; };
  public static long Post_call( String fname) { return 0; };
  public static long Is_func_exec_successful( String fname, String opr, int value) { return 0; };
  public static long Is_return_checked_properly( String fname, String opr, int value) { return 0; };
  public static long Is_var_used_after(Object v) { return 0; };
  public static long Is_var_defined_after(Object v) { return 0; };
  public static long Is_var_invalid_and_used_after(Object v) { return 0; };
  public static long Is_errno_checked_after() { return 0; };
  public static long Parm_is_def_by_func(Object arg, String func) { return 0; };
  public static long Is_called_by( String fname) { return 0; };
  public static long Is_called_in_thread() { return 0; };
  public static long Is_called_in_isr() { return 0; };
  public static long Is_called_in_loop() { return 0; };
  public static long Is_memory_overlap(Object tgt, long size, Object src) { return 0; };
  public static long Is_memory_big_enough(Object tgt, long elem_sz, long elem_cnt) { return 0; };
  public static long Func_may_enter_recursion(Object func) { return 0; };
  public static long Func_may_not_return(Object func) { return 0; };
  public static long Func_is_asynchronous_safe(Object func) { return 0; };
  public static long Func_performs_sanitize() { return 0; };
  public static long Is_automatic_variable(Object v) { return 0; };
  public static long Is_dynamically_allocated_if_copied(Object v) { return 0; };
  public static long Is_compatible_parm_type(int i) { return 0; };
  public static long Is_parm_tainted(Object obj) { return 0; };
  public static long Is_std_output(Object v) { return 0; };
  public static long Do_not_get_called() { return 0; };
  public static long Do_not_call( String fname) { return 0; };
  public static long Do_not_access_shared_obj(Object func) { return 0; };
  public static long Do_not_call_sleep_in_atm() { return 0; };
  public static long Implicit_call(Object obj, String fname, Object parm) { return 0; };
  public static long Call_super() { return 0; };
  public static long Func_invoked_by_subclass( String fname) { return 0; };
  public static long Is_obj_meth_override(Object obj, String fname) { return 0; };
  public static long Model_decl(long ret) { return 0; };
  public static long Assume_parm(int i, long lower, long upper) { return 0; };
  public static long Assume_var( String var, long line, long lower, long upper) { return 0; };
  public static long Assume_ret(long lower, long upper) { return 0; };
  public static long Declare_malloc_similar(int i) { return 0; };
  public static long Declare_free_similar(int i) { return 0; };
  public static long Set_tag(Object obj, String tag) { return 0; };
  public static long Set_tag_for_all_parm(String tag) { return 0; };
  public static long Unset_tag(Object obj, String tag) { return 0; };
  public static long Set_tag_attr(Object tgt, Object src, String tag, String tag_attr) { return 0; };
  public static long Is_tag_set(Object v, String tag) { return 0; };
  public static long Is_tag_attr_set(Object v, String tag, String tag_attr) { return 0; };
  public static long Is_tag_attr_set_for_all_parm( String tag, String tag_attr) { return 0; };
  public static long Or_tag(Object tgt, Object src) { return 0; };
  public static long Merge_tag(Object tgt, Object src1, Object src2) { return 0; };
  public static long Copy_tag(Object tgt, Object src) { return 0; };
  public static long Eval_tag(Object tgt, Object src) { return 0; };
  public static long Set_tag_const_defval( String tag, long value) { return 0; };
  public static long Set_tag_input_defval( String tag, long value) { return 0; };
  public static long Decl_tag_equal( String tag1, String tag2) { return 0; };
  public static long Set_func_tag( String func_name, Object[] tagobjArr) { return 0; };
  public static long Set_TY_is_mutex(String type_name) { return 0; };
  public static long Set_TY_is_atomic(String type_name) { return 0; };
  public static long Set_TY_is_thread(String type_name) { return 0; };
  public static String Get_type_name(Object v) { return null; };
  public static int Get_type_kind(Object v) { return 0; };
  public static Object Get_this_pointer() { return null; };
  public static Object Get_arg(int i) { return null; };
  public static Object Get_ret() { return null; };
  public static int Get_argcnt(Object func) { return 0; };
  public static int Get_mem_size(Object expr) { return 0; };
  public static int Get_value(Object expr) { return 0; };
  public static int Get_elem_count(Object v) { return 0; };
  public static int Get_strlen(Object v) { return 0; };
  public static int Get_max_call_depth() { return 0; };
  public static int Get_max_stack_size() { return 0; };
  public static int Get_max_stack_size(Object func) { return 0; };
  public static long Set_parm_tainted(Object obj) { return 0; };
  public static long Set_implicit_assign(Object tgt, Object src) { return 0; };
  public static long Set_parm_deref(Object obj) { return 0; };
  public static long Set_parm_mod(Object obj) { return 0; };
  public static long Set_parm_base_and_fld_name(Object base, Object name) { return 0; };
  public static long Set_func_may_sleep(Object v) { return 0; };
  public static long Set_atomic_region_begin() { return 0; };
  public static long Set_atomic_region_end() { return 0; };
  public static long Set_func_atomic() { return 0; };
  public static long Set_func_shutdown() { return 0; };
  public static long Set_func_errno_setting() { return 0; };
  public static long Set_func_container_init(Object obj, Object value) { return 0; };
  public static long Set_func_coll_append(Object obj, Object value) { return 0; };
  public static long Set_func_coll_insert(Object obj, Object pos, Object cnt, Object value) { return 0; };
  public static long Set_func_coll_remove(Object obj, Object idx) { return 0; };
  public static long Set_func_coll_get(Object obj, Object idx) { return 0; };
  public static long Set_func_coll_back(Object obj) { return 0; };
  public static long Set_func_coll_end(Object obj) { return 0; };
  public static long Set_func_map_put(Object obj, Object key, Object value) { return 0; };
  public static long Set_func_map_get(Object obj, Object key) { return 0; };
  public static long Set_func_str_get(Object base, Object idx) { return 0; };
  public static long Set_func_coll_append_ref(Object obj, Object value) { return 0; };
  public static long Set_func_coll_get_ref(Object obj, Object idx) { return 0; };
  public static long Set_func_coll_back_ref(Object obj) { return 0; };
  public static long Set_func_map_put_ref(Object obj, Object key, Object value) { return 0; };
  public static long Set_func_map_get_ref(Object obj, Object key) { return 0; };
  public static long Set_func_thread(long is_multi_thread) { return 0; };
  public static long Set_class_sensitive() { return 0; };
  public static long Hard_coded_password(Object var, Object value) { return 0; };
  public static long Is_null_term_str(Object var, long len) { return 0; };
  public static long Is_null_term_set(Object var) { return 0; };
  public static long Is_const_str_eq( String str1, String str2) { return 0; };
  public static long Is_str_eq(Object var, String str) { return 0; };
  public static long Is_str_sub(Object var, String str) { return 0; };
  public static long Is_str_match(Object var, String str) { return 0; };
  public static long Is_parm_constant(Object value) { return 0; };
  public static long Is_init_by_const_str(Object value) { return 0; };
  public static long Is_compression_extraction_safe(Object value) { return 0; };
  public static long Is_parm_plain_old_func(Object value) { return 0; };
  public static long Is_return_value_checked() { return 0; };
  public static long Is_parm_type_addr_passed( String type_name) { return 0; };
  public static long Fsm_use( String fsm_name) { return 0; };
  public static long Fsm_build_begin( String fsm_name) { return 0; };
  public static long Fsm_new_start_state( String state_name) { return 0; };
  public static long Fsm_new_final_state( String state_name) { return 0; };
  public static long Fsm_add_transition( String state, String action,
                                               Object key, long cond, String next_state,
                                               String rule_name, int msg_id) { return 0; };
  public static long Fsm_set_default_action( String state_name,
                                                   String rule_name, int msg_id) { return 0; };
  public static long Fsm_build_end( String fsm_name) { return 0; };
  public static long Exec_eval(int opr) { return 0; };
  public static long Exec_eval(int opr, long arg1) { return 0; };
  public static long Exec_eval(int opr, Object arg1) { return 0; };
  public static long Exec_eval(int opr, long arg1, long arg2) { return 0; };
  public static long Exec_eval(int opr, Object arg1, Object arg2) { return 0; };
  public static long Exec_eval(int opr, long arg1, long arg2, long arg3) { return 0; };
  public static long Exec_eval(int opr, Object arg1, Object arg2, Object arg3) { return 0; };
  public static long Exec_eval(int opr, long arg1, long arg2,
                                      long arg3, long arg4) { return 0; };
  public static long Exec_eval(int opr, Object arg1, Object arg2,
                                      Object arg3, Object arg4) { return 0; };
  public static long Exec_eval(int opr, long arg1, long arg2, long arg3,
                                      long arg4, long arg5) { return 0; };
  public static long Exec_eval(int opr, Object arg1, Object arg2, Object arg3, Object arg4,
                                      Object arg5) { return 0; };
  public static long Exec_eval(int opr, long arg1, long arg2, long arg3,
                                      long arg4, long arg5, long arg6) { return 0; };
  public static long Exec_eval(int opr, Object arg1, Object arg2, Object arg3, Object arg4,
                                      Object arg5, Object arg6) { return 0; };
  public static long Jni_model_pragma() { return 0; };
};
